{
  "openapi": "3.0.0",
  "info": {
    "title": "Yatri",
    "version": "1.0"
  },
  "paths": {
    "/v2": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v2/auth": {
      "post": {
        "parameters": [
          {
            "name": "x-bundle-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          },
          {
            "name": "x-client-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AuthReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `x-client-version` or `x-bundle-version` or `body`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRes"
                }
              }
            }
          }
        }
      }
    },
    "/v2/auth/signature": {
      "post": {
        "parameters": [
          {
            "name": "x-bundle-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          },
          {
            "name": "x-client-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `x-client-version` or `x-bundle-version` or `x-sdk-authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "SignatureAuthReq": []
          }
        ]
      }
    },
    "/v2/auth/{authId}/verify": {
      "post": {
        "parameters": [
          {
            "name": "authId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AuthVerifyReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body`"
          },
          "404": {
            "description": "`authId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthVerifyRes"
                }
              }
            }
          }
        }
      }
    },
    "/v2/auth/otp/{authId}/resend": {
      "post": {
        "parameters": [
          {
            "name": "authId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "`authId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRes"
                }
              }
            }
          }
        }
      }
    },
    "/v2/auth/logout": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/profile": {
      "get": {
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAPIEntity"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/profile/defaultEmergencyNumbers": {
      "get": {
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetProfileDefaultEmergencyNumbersResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDefaultEmergencyNumbersReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideSearch": {
      "post": {
        "parameters": [
          {
            "name": "x-bundle-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          },
          {
            "name": "x-client-version",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string",
              "pattern": "^\\d+.\\d+.\\d+"
            }
          },
          {
            "name": "x-device",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SearchReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `x-device` or `x-client-version` or `x-bundle-version` or `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/estimate/{estimateId}/select": {
      "post": {
        "parameters": [
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/estimate/{estimateId}/select2": {
      "post": {
        "parameters": [
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/DEstimateSelectReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/estimate/{estimateId}/quotes": {
      "get": {
        "parameters": [
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/estimate/{estimateId}/results": {
      "get": {
        "parameters": [
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResultResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/estimate/{estimateId}/cancel": {
      "post": {
        "parameters": [
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CancelAPIResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideSearch/{searchId}/results": {
      "get": {
        "parameters": [
          {
            "name": "searchId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`searchId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideSearch/quotes/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`quoteId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideBooking/{rideBookingId}": {
      "post": {
        "parameters": [
          {
            "name": "rideBookingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`rideBookingId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BookingAPIEntity"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideBooking/list": {
      "get": {
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "onlyActive",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BookingListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/rideBooking/{rideBookingId}/cancel": {
      "post": {
        "parameters": [
          {
            "name": "rideBookingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CancelReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`rideBookingId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/ride/{rideId}/driver/location": {
      "post": {
        "parameters": [
          {
            "name": "rideId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`rideId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/LatLong"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/ride/{rideId}/status": {
      "get": {
        "parameters": [
          {
            "name": "rideId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`rideId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetRideStatusResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/ride/{rideId}/call/driver": {
      "post": {
        "parameters": [
          {
            "name": "rideId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`rideId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CallRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/ride/{rideId}/call/{callId}/status": {
      "get": {
        "parameters": [
          {
            "name": "rideId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "callId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`rideId` or `callId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CallStatusAPIEntity"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/ride/call/statusCallback": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ExotelCallCallbackReq_CallAttachments"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/exotel/call/driver/number": {
      "get": {
        "parameters": [
          {
            "name": "CallSid",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CallFrom",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CallTo",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digits",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CallStatus",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RINGING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "BUSY",
                "NO_ANSWER",
                "CANCELED",
                "INVALID_STATUS"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `CallStatus` or `digits` or `CallTo` or `CallFrom` or `CallSid`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v2/exotel/call/statusCallback": {
      "get": {
        "parameters": [
          {
            "name": "CallSid",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DialCallStatus",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RINGING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "BUSY",
                "NO_ANSWER",
                "CANCELED",
                "INVALID_STATUS"
              ]
            }
          },
          {
            "name": "RecordingUrl",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Legs[0][OnCallDuration]",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": -9223372036854776000,
              "type": "integer",
              "maximum": 9223372036854776000
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `Legs[0][OnCallDuration]` or `RecordingUrl` or `DialCallStatus` or `CallSid`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/support/sendIssue": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SendIssueReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetRoutesReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RouteInfo"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/pickup/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetRoutesReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RouteInfo"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/trip/route": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetRoutesReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RouteInfo"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/serviceability/origin": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceabilityReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceabilityRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/serviceability/destination": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServiceabilityReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceabilityRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/feedback/rateRide": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/customerSupport/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/LoginReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRes"
                }
              }
            }
          }
        }
      }
    },
    "/v2/customerSupport/logout": {
      "post": {
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/customerSupport/orders": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `offset` or `limit` or `phone` or `id` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrderResp"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/maps/autoComplete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AutoCompleteReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCompleteResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/maps/getPlaceDetails": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetPlaceDetailsReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlaceDetailsResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/maps/getPlaceName": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetPlaceNameReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlaceName"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/language/translate": {
      "get": {
        "parameters": [
          {
            "name": "source",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI"
              ]
            }
          },
          {
            "name": "target",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ENGLISH",
                "HINDI",
                "KANNADA",
                "TAMIL",
                "MALAYALAM",
                "BENGALI"
              ]
            }
          },
          {
            "name": "q",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `q` or `target` or `source` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TranslateResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/cancellationReason/list": {
      "get": {
        "parameters": [
          {
            "name": "cancellationStage",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "OnSearch",
                "OnConfirm",
                "OnAssign"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `cancellationStage` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CancellationReasonAPIEntity"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/savedLocation": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CreateSavedReqLocationReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/savedLocation/list": {
      "get": {
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReqLocationsListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/savedLocation/{tag}": {
      "delete": {
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`tag` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/webengage/2/customer": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/WebengageReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/WebengageRes"
                }
              }
            }
          }
        }
      }
    },
    "/v2/update/status": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StatusRes"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          }
        }
      }
    },
    "/v2/frontend/flowStatus": {
      "get": {
        "parameters": [
          {
            "name": "isPolling",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `isPolling` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonFlowStatusRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/frontend/notifyEvent": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/NotifyEventReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/whatsapp/opt": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/OptAPIRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/sos/create": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SosReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SosRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/v2/sos/{sosId}/status": {
      "post": {
        "parameters": [
          {
            "name": "sosId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SosFeedbackReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`sosId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "VerifyToken": []
          }
        ]
      }
    },
    "/cab/v1/on_search": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnSearchMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `X-Gateway-Authorization` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/cab/v1/on_select": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnSelectMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/cab/v1/on_init": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnInitMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/cab/v1/on_confirm": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnConfirmMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/cab/v1/on_update": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnUpdateMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/cab/v1/on_track": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnTrackMessage"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/metro/v1/on_search": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/BecknCallbackReq_OnSearchCatalog"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `X-Gateway-Authorization` or `Authorization`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AckResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "Subscriber": []
          }
        ]
      }
    },
    "/internal/auth/{token}": {
      "get": {
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "`token` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard/{merchantId}/customer/list": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": -9223372036854776000,
              "type": "integer",
              "maximum": 9223372036854776000
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": -9223372036854776000,
              "type": "integer",
              "maximum": 9223372036854776000
            }
          },
          {
            "name": "enabled",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "blocked",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `phone` or `blocked` or `enabled` or `offset` or `limit` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/delete": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/block": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/unblock": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/customer/{customerId}/info": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfoRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/booking/cancel/allStuck": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/StuckBookingsCancelReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/StuckBookingsCancelRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/merchant/update": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MerchantUpdateReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceUsageConfig/maps/update": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/MapsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/merchant/serviceUsageConfig/sms/update": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SmsServiceUsageConfigUpdateReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/ride/{rideId}/info": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rideId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `rideId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ShareRideInfoRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/ride/list": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": -9223372036854776000,
              "type": "integer",
              "maximum": 9223372036854776000
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": -9223372036854776000,
              "type": "integer",
              "maximum": 9223372036854776000
            }
          },
          {
            "name": "bookingStatus",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "UPCOMING",
                "UPCOMING_6HRS",
                "ONGOING",
                "ONGOING_6HRS",
                "RCOMPLETED",
                "RCANCELLED"
              ]
            }
          },
          {
            "name": "rideShortId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerPhoneNo",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "driverPhoneNo",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `driverPhoneNo` or `customerPhoneNo` or `rideShortId` or `bookingStatus` or `offset` or `limit` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/RideListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/auth": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAuthReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/{authId}/verify": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AuthVerifyReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `authId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthVerifyRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/otp/{authId}/resend": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `authId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/registration/logout/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/profile/detail/{customerId}": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PersonAPIEntity"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/profile/update/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/search/{customerId}/rideSearch": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/SearchReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/quote/{searchId}/{customerId}/result": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `searchId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/estimate/{customerId}/{estimateId}/select": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/quotes": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/result": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QuotesResultResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/select/{customerId}/{estimateId}/cancel": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "estimateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` or `estimateId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CancelAPIResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/confirm/rideSearch/{customerId}/quotes/{quoteId}/confirm": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` or `quoteId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/booking/ridebooking/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rideBookingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `rideBookingId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BookingAPIEntity"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/booking/list/{customerId}": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "onlyActive",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "NEW",
                "CONFIRMED",
                "AWAITING_REASSIGNMENT",
                "REALLOCATED",
                "COMPLETED",
                "CANCELLED",
                "TRIP_ASSIGNED"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `status` or `onlyActive` or `offset` or `limit` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/BookingListRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/autoComplete/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AutoCompleteReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AutoCompleteResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/getPlaceDetails/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetPlaceDetailsReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPlaceDetailsResp"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/maps/getPlaceName/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/GetPlaceNameReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlaceName"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/frontend/flowStatus/{customerId}": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPolling",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `isPolling` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetPersonFlowStatusRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/frontend/notifyEvent/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/NotifyEventReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/rideBooking/rideBooking/cancel/{rideBookingId}/{customerId}": {
      "post": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rideBookingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CancelReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "404": {
            "description": "`merchantId` or `rideBookingId` or `customerId` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/dashboard/{merchantId}/issue/list/{mobileCountryCode}/{mobileNumber}": {
      "get": {
        "parameters": [
          {
            "name": "merchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobileCountryCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobileNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid `token`"
          },
          "404": {
            "description": "`merchantId` or `mobileCountryCode` or `mobileNumber` not found"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    },
    "/exotel/heartbeat": {
      "post": {
        "requestBody": {
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ExotelHeartbeatReq"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid `body` or `token`"
          },
          "200": {
            "description": "",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APISuccess"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "DashboardVerifyToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRes": {
        "type": "object",
        "required": [
          "authId",
          "attempts",
          "authType"
        ],
        "properties": {
          "authId": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/PersonAPIEntity"
          },
          "attempts": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "authType": {
            "$ref": "#/components/schemas/LoginType"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "LoginType": {
        "type": "string",
        "enum": [
          "OTP",
          "PASSWORD",
          "DIRECT"
        ]
      },
      "PersonAPIEntity": {
        "type": "object",
        "required": [
          "id",
          "hasTakenRide",
          "hasTakenValidRide",
          "gender"
        ],
        "properties": {
          "firstName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "hasTakenValidRide": {
            "type": "boolean"
          },
          "maskedDeviceToken": {
            "type": "string"
          },
          "whatsappNotificationEnrollStatus": {
            "$ref": "#/components/schemas/OptApiMethods"
          },
          "id": {
            "type": "string"
          },
          "referralCode": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "hasTakenRide": {
            "type": "boolean"
          },
          "middleName": {
            "type": "string"
          },
          "maskedMobileNumber": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          }
        }
      },
      "OptApiMethods": {
        "type": "string",
        "enum": [
          "OPT_IN",
          "OPT_OUT"
        ]
      },
      "Language": {
        "type": "string",
        "enum": [
          "ENGLISH",
          "HINDI",
          "KANNADA",
          "TAMIL",
          "MALAYALAM",
          "BENGALI"
        ]
      },
      "Gender": {
        "type": "string",
        "enum": [
          "MALE",
          "FEMALE",
          "OTHER",
          "UNKNOWN",
          "PREFER_NOT_TO_SAY"
        ]
      },
      "AuthReq": {
        "type": "object",
        "required": [
          "mobileNumber",
          "mobileCountryCode",
          "merchantId"
        ],
        "properties": {
          "merchantId": {
            "type": "string"
          },
          "mobileCountryCode": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "notificationToken": {
            "type": "string"
          },
          "whatsappNotificationEnroll": {
            "$ref": "#/components/schemas/OptApiMethods"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "deviceToken": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "mobileNumber": {
            "type": "string"
          }
        }
      },
      "AuthVerifyRes": {
        "type": "object",
        "required": [
          "token",
          "person"
        ],
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonAPIEntity"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "AuthVerifyReq": {
        "type": "object",
        "required": [
          "otp",
          "deviceToken"
        ],
        "properties": {
          "whatsappNotificationEnroll": {
            "$ref": "#/components/schemas/OptApiMethods"
          },
          "deviceToken": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          }
        }
      },
      "APISuccess": {
        "type": "string",
        "enum": [
          "Success"
        ]
      },
      "UpdateProfileReq": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "notificationToken": {
            "type": "string"
          },
          "referralCode": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "deviceToken": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          }
        }
      },
      "UpdateProfileDefaultEmergencyNumbersReq": {
        "type": "object",
        "required": [
          "defaultEmergencyNumbers"
        ],
        "properties": {
          "defaultEmergencyNumbers": {
            "items": {
              "$ref": "#/components/schemas/PersonDefaultEmergencyNumber"
            },
            "type": "array"
          }
        }
      },
      "PersonDefaultEmergencyNumber": {
        "type": "object",
        "required": [
          "name",
          "mobileCountryCode",
          "mobileNumber"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "mobileCountryCode": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          }
        }
      },
      "GetProfileDefaultEmergencyNumbersResp": {
        "type": "object",
        "required": [
          "defaultEmergencyNumbers"
        ],
        "properties": {
          "defaultEmergencyNumbers": {
            "items": {
              "$ref": "#/components/schemas/PersonDefaultEmergencyNumberAPIEntity"
            },
            "type": "array"
          }
        }
      },
      "PersonDefaultEmergencyNumberAPIEntity": {
        "type": "object",
        "required": [
          "personId",
          "name",
          "mobileCountryCode",
          "mobileNumber"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "mobileCountryCode": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          }
        }
      },
      "SearchRes": {
        "type": "object",
        "required": [
          "searchId",
          "searchExpiry"
        ],
        "properties": {
          "searchExpiry": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "searchId": {
            "type": "string"
          },
          "routeInfo": {
            "$ref": "#/components/schemas/RouteInfo"
          }
        }
      },
      "UTCTime": {
        "type": "string",
        "format": "yyyy-mm-ddThh:MM:ssZ",
        "example": "2016-07-22T00:00:00Z"
      },
      "RouteInfo": {
        "type": "object",
        "required": [
          "snappedWaypoints",
          "points"
        ],
        "properties": {
          "distance": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "snappedWaypoints": {
            "items": {
              "$ref": "#/components/schemas/LatLong"
            },
            "type": "array"
          },
          "duration": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "boundingBox": {
            "$ref": "#/components/schemas/BoundingBoxWithoutCRS"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/LatLong"
            },
            "type": "array"
          }
        }
      },
      "BoundingBoxWithoutCRS": {
        "type": "string",
        "description": "https://datatracker.ietf.org/doc/html/rfc7946#section-5"
      },
      "LatLong": {
        "type": "object",
        "required": [
          "lat",
          "lon"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SearchReq": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "ONE_WAY"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/OneWaySearchReq"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "RENTAL"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/RentalSearchReq"
              }
            }
          }
        ]
      },
      "OneWaySearchReq": {
        "type": "object",
        "required": [
          "origin",
          "destination"
        ],
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/SearchReqLocation"
          },
          "origin": {
            "$ref": "#/components/schemas/SearchReqLocation"
          }
        }
      },
      "SearchReqLocation": {
        "type": "object",
        "required": [
          "gps",
          "address"
        ],
        "properties": {
          "gps": {
            "$ref": "#/components/schemas/LatLong"
          },
          "address": {
            "$ref": "#/components/schemas/LocationAddress"
          }
        }
      },
      "LocationAddress": {
        "type": "object",
        "properties": {
          "ward": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "door": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "areaCode": {
            "type": "string"
          }
        }
      },
      "RentalSearchReq": {
        "type": "object",
        "required": [
          "origin",
          "startTime"
        ],
        "properties": {
          "startTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "origin": {
            "$ref": "#/components/schemas/SearchReqLocation"
          }
        }
      },
      "DEstimateSelectReq": {
        "type": "object",
        "required": [
          "autoAssignEnabled"
        ],
        "properties": {
          "customerExtraFee": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "autoAssignEnabledV2": {
            "type": "boolean"
          },
          "autoAssignEnabled": {
            "type": "boolean"
          }
        }
      },
      "SelectListRes": {
        "type": "object",
        "required": [
          "selectedQuotes"
        ],
        "properties": {
          "selectedQuotes": {
            "items": {
              "$ref": "#/components/schemas/QuoteAPIEntity"
            },
            "type": "array"
          }
        }
      },
      "QuoteAPIEntity": {
        "type": "object",
        "required": [
          "id",
          "vehicleVariant",
          "estimatedFare",
          "estimatedTotalFare",
          "agencyName",
          "agencyNumber",
          "agencyCompletedRidesCount",
          "tripTerms",
          "quoteDetails",
          "createdAt"
        ],
        "properties": {
          "tripTerms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "quoteDetails": {
            "$ref": "#/components/schemas/QuoteAPIDetails"
          },
          "agencyName": {
            "type": "string"
          },
          "agencyNumber": {
            "type": "string"
          },
          "estimatedFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "vehicleVariant": {
            "$ref": "#/components/schemas/VehicleVariant"
          },
          "id": {
            "type": "string"
          },
          "agencyCompletedRidesCount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "discount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "estimatedTotalFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "VehicleVariant": {
        "type": "string",
        "enum": [
          "SEDAN",
          "SUV",
          "HATCHBACK",
          "AUTO_RICKSHAW",
          "TAXI",
          "TAXI_PLUS"
        ]
      },
      "QuoteAPIDetails": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "ONE_WAY"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/OneWayQuoteAPIDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "RENTAL"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/RentalSlabAPIEntity"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "DRIVER_OFFER"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/DriverOfferAPIEntity"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "OneWaySpecialZoneAPIDetails"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/SpecialZoneQuoteAPIEntity"
              }
            }
          }
        ]
      },
      "OneWayQuoteAPIDetails": {
        "type": "object",
        "required": [
          "distanceToNearestDriver"
        ],
        "properties": {
          "distanceToNearestDriver": {
            "$ref": "#/components/schemas/Centesimal"
          }
        }
      },
      "Centesimal": {
        "type": "string",
        "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
        "description": "Monetary amount in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Maximum allowed precision (total number of digits) is 30 String format is used to prevent loss of precision."
      },
      "RentalSlabAPIEntity": {
        "type": "object",
        "required": [
          "baseDistance",
          "baseDuration"
        ],
        "properties": {
          "baseDistance": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "baseDuration": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "DriverOfferAPIEntity": {
        "type": "object",
        "required": [
          "driverName",
          "durationToPickup",
          "distanceToPickup",
          "validTill"
        ],
        "properties": {
          "driverName": {
            "type": "string"
          },
          "distanceToPickup": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "durationToPickup": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "validTill": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "rating": {
            "$ref": "#/components/schemas/Centesimal"
          }
        }
      },
      "SpecialZoneQuoteAPIEntity": {
        "type": "object",
        "required": [
          "quoteId"
        ],
        "properties": {
          "quoteId": {
            "type": "string"
          }
        }
      },
      "QuotesResultResponse": {
        "type": "object",
        "properties": {
          "selectedQuotes": {
            "$ref": "#/components/schemas/SelectListRes"
          },
          "bookingId": {
            "type": "string"
          }
        }
      },
      "CancelAPIResponse": {
        "type": "string",
        "enum": [
          "BookingAlreadyCreated",
          "FailedToCancel",
          "Success"
        ]
      },
      "GetQuotesRes": {
        "type": "object",
        "required": [
          "fromLocation",
          "toLocation",
          "quotes",
          "estimates"
        ],
        "properties": {
          "estimates": {
            "items": {
              "$ref": "#/components/schemas/EstimateAPIEntity"
            },
            "type": "array"
          },
          "toLocation": {
            "$ref": "#/components/schemas/SearchReqLocationAPIEntity"
          },
          "quotes": {
            "items": {
              "$ref": "#/components/schemas/OfferRes"
            },
            "type": "array"
          },
          "fromLocation": {
            "$ref": "#/components/schemas/SearchReqLocationAPIEntity"
          }
        }
      },
      "SearchReqLocationAPIEntity": {
        "type": "object",
        "required": [
          "lat",
          "lon"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "OfferRes": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "onDemandCab"
            ],
            "properties": {
              "onDemandCab": {
                "$ref": "#/components/schemas/QuoteAPIEntity"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "metro"
            ],
            "properties": {
              "metro": {
                "$ref": "#/components/schemas/MetroOffer"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "publicTransport"
            ],
            "properties": {
              "publicTransport": {
                "$ref": "#/components/schemas/PublicTransportQuote"
              }
            }
          }
        ]
      },
      "MetroOffer": {
        "type": "object",
        "required": [
          "rideSearchId",
          "description",
          "rides",
          "createdAt"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "rides": {
            "items": {
              "$ref": "#/components/schemas/MetroRide"
            },
            "type": "array"
          },
          "rideSearchId": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "MetroRide": {
        "type": "object",
        "required": [
          "schedule",
          "departureStation",
          "arrivalStation",
          "price"
        ],
        "properties": {
          "schedule": {
            "items": {
              "$ref": "#/components/schemas/ScheduleElement"
            },
            "type": "array"
          },
          "departureStation": {
            "$ref": "#/components/schemas/MetroStation"
          },
          "price": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "arrivalStation": {
            "$ref": "#/components/schemas/MetroStation"
          }
        }
      },
      "ScheduleElement": {
        "type": "object",
        "required": [
          "departureTime",
          "arrivalTime"
        ],
        "properties": {
          "departureTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "arrivalTime": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "MetroStation": {
        "type": "object",
        "required": [
          "name",
          "point"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "stationCode": {
            "type": "string"
          },
          "point": {
            "$ref": "#/components/schemas/LatLong"
          }
        }
      },
      "PublicTransportQuote": {
        "type": "object",
        "required": [
          "id",
          "description",
          "fare",
          "departureTime",
          "arrivalTime",
          "departureStation",
          "arrivalStation",
          "createdAt"
        ],
        "properties": {
          "departureStation": {
            "$ref": "#/components/schemas/PublicTransportStation"
          },
          "departureTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "arrivalTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "arrivalStation": {
            "$ref": "#/components/schemas/PublicTransportStation"
          },
          "fare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "PublicTransportStation": {
        "type": "object",
        "required": [
          "name",
          "stationCode",
          "lat",
          "lon"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "stationCode": {
            "type": "string"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "EstimateAPIEntity": {
        "type": "object",
        "required": [
          "id",
          "vehicleVariant",
          "estimatedFare",
          "estimatedTotalFare",
          "totalFareRange",
          "agencyName",
          "agencyNumber",
          "agencyCompletedRidesCount",
          "tripTerms",
          "estimateFareBreakup",
          "waitingCharges",
          "driversLatLong",
          "createdAt"
        ],
        "properties": {
          "tripTerms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "totalFareRange": {
            "$ref": "#/components/schemas/FareRange"
          },
          "waitingCharges": {
            "$ref": "#/components/schemas/WaitingCharges"
          },
          "agencyName": {
            "type": "string"
          },
          "agencyNumber": {
            "type": "string"
          },
          "nightShiftRate": {
            "$ref": "#/components/schemas/NightShiftRateAPIEntity"
          },
          "estimateFareBreakup": {
            "items": {
              "$ref": "#/components/schemas/EstimateBreakupAPIEntity"
            },
            "type": "array"
          },
          "estimatedFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "vehicleVariant": {
            "$ref": "#/components/schemas/VehicleVariant"
          },
          "id": {
            "type": "string"
          },
          "agencyCompletedRidesCount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "discount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "nightShiftInfo": {
            "$ref": "#/components/schemas/NightShiftInfo"
          },
          "estimatedTotalFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "driversLatLong": {
            "items": {
              "$ref": "#/components/schemas/LatLong"
            },
            "type": "array"
          }
        }
      },
      "FareRange": {
        "type": "object",
        "required": [
          "minFare",
          "maxFare"
        ],
        "properties": {
          "maxFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "minFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "EstimateBreakupAPIEntity": {
        "type": "object",
        "required": [
          "title",
          "price"
        ],
        "properties": {
          "price": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "title": {
            "type": "string"
          }
        }
      },
      "NightShiftRateAPIEntity": {
        "type": "object",
        "required": [
          "nightShiftMultuplier",
          "nightShiftStart",
          "nightShiftEnd"
        ],
        "properties": {
          "nightShiftMultuplier": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "nightShiftEnd": {
            "$ref": "#/components/schemas/TimeOfDay"
          },
          "nightShiftStart": {
            "$ref": "#/components/schemas/TimeOfDay"
          }
        }
      },
      "TimeOfDay": {
        "type": "string",
        "format": "hh:MM:ss",
        "example": "12:33:15"
      },
      "NightShiftInfo": {
        "type": "object",
        "required": [
          "nightShiftCharge",
          "oldNightShiftCharge",
          "nightShiftStart",
          "nightShiftEnd"
        ],
        "properties": {
          "nightShiftCharge": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "nightShiftEnd": {
            "$ref": "#/components/schemas/TimeOfDay"
          },
          "nightShiftStart": {
            "$ref": "#/components/schemas/TimeOfDay"
          },
          "oldNightShiftCharge": {
            "$ref": "#/components/schemas/Centesimal"
          }
        }
      },
      "WaitingCharges": {
        "type": "object",
        "properties": {
          "waitingChargePerMin": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "ConfirmRes": {
        "type": "object",
        "required": [
          "bookingId"
        ],
        "properties": {
          "bookingId": {
            "type": "string"
          }
        }
      },
      "BookingAPIEntity": {
        "type": "object",
        "required": [
          "id",
          "status",
          "agencyName",
          "agencyNumber",
          "estimatedFare",
          "estimatedTotalFare",
          "fromLocation",
          "rideList",
          "tripTerms",
          "fareBreakup",
          "bookingDetails",
          "merchantExoPhone",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "tripTerms": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fareBreakup": {
            "items": {
              "$ref": "#/components/schemas/FareBreakupAPIEntity"
            },
            "type": "array"
          },
          "agencyName": {
            "type": "string"
          },
          "agencyNumber": {
            "type": "string"
          },
          "estimatedFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "status": {
            "$ref": "#/components/schemas/BookingStatus"
          },
          "id": {
            "type": "string"
          },
          "discount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "duration": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "rideStartTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "fromLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          },
          "rideList": {
            "items": {
              "$ref": "#/components/schemas/RideAPIEntity"
            },
            "type": "array"
          },
          "bookingDetails": {
            "$ref": "#/components/schemas/BookingAPIDetails"
          },
          "merchantExoPhone": {
            "type": "string"
          },
          "rideEndTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "estimatedTotalFare": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "BookingStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "CONFIRMED",
          "AWAITING_REASSIGNMENT",
          "REALLOCATED",
          "COMPLETED",
          "CANCELLED",
          "TRIP_ASSIGNED"
        ]
      },
      "BookingLocationAPIEntity": {
        "type": "object",
        "required": [
          "lat",
          "lon"
        ],
        "properties": {
          "ward": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "city": {
            "type": "string"
          },
          "lon": {
            "type": "number",
            "format": "double"
          },
          "door": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "areaCode": {
            "type": "string"
          }
        }
      },
      "RideAPIEntity": {
        "type": "object",
        "required": [
          "id",
          "shortRideId",
          "status",
          "driverName",
          "driverRegisteredAt",
          "vehicleNumber",
          "vehicleColor",
          "vehicleVariant",
          "vehicleModel",
          "rideOtp",
          "createdAt",
          "updatedAt",
          "bppRideId"
        ],
        "properties": {
          "driverName": {
            "type": "string"
          },
          "shortRideId": {
            "type": "string"
          },
          "driverNumber": {
            "type": "string"
          },
          "vehicleNumber": {
            "type": "string"
          },
          "driverRegisteredAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "driverRatings": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "vehicleVariant": {
            "$ref": "#/components/schemas/VehicleVariant"
          },
          "bppRideId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RideStatus"
          },
          "id": {
            "type": "string"
          },
          "rideRating": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "vehicleModel": {
            "type": "string"
          },
          "rideStartTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "chargeableRideDistance": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "rideOtp": {
            "type": "string"
          },
          "vehicleColor": {
            "type": "string"
          },
          "rideEndTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "driverArrivalTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "computedPrice": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "RideStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "INPROGRESS",
          "COMPLETED",
          "CANCELLED"
        ]
      },
      "FareBreakupAPIEntity": {
        "type": "object",
        "required": [
          "description",
          "amount"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/HighPrecMoney"
          }
        }
      },
      "HighPrecMoney": {
        "type": "number",
        "format": "double"
      },
      "BookingAPIDetails": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "ONE_WAY"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/OneWayBookingAPIDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "RENTAL"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/RentalSlabAPIEntity"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "DRIVER_OFFER"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/OneWayBookingAPIDetails"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "fareProductType",
              "contents"
            ],
            "properties": {
              "fareProductType": {
                "type": "string",
                "enum": [
                  "OneWaySpecialZoneAPIDetails"
                ]
              },
              "contents": {
                "$ref": "#/components/schemas/OneWaySpecialZoneBookingAPIDetails"
              }
            }
          }
        ]
      },
      "OneWayBookingAPIDetails": {
        "type": "object",
        "required": [
          "toLocation",
          "estimatedDistance"
        ],
        "properties": {
          "estimatedDistance": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "toLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          }
        }
      },
      "OneWaySpecialZoneBookingAPIDetails": {
        "type": "object",
        "required": [
          "toLocation",
          "estimatedDistance"
        ],
        "properties": {
          "otpCode": {
            "type": "string"
          },
          "estimatedDistance": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "toLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          }
        }
      },
      "BookingListRes": {
        "type": "object",
        "required": [
          "list"
        ],
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/BookingAPIEntity"
            },
            "type": "array"
          }
        }
      },
      "CancelReq": {
        "type": "object",
        "required": [
          "reasonCode",
          "reasonStage"
        ],
        "properties": {
          "additionalInfo": {
            "type": "string"
          },
          "reasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          },
          "reasonStage": {
            "$ref": "#/components/schemas/CancellationStage"
          }
        }
      },
      "CancellationReasonCode": {
        "type": "string"
      },
      "CancellationStage": {
        "type": "string",
        "enum": [
          "OnSearch",
          "OnConfirm",
          "OnAssign"
        ]
      },
      "GetRideStatusResp": {
        "type": "object",
        "required": [
          "fromLocation",
          "toLocation",
          "ride",
          "customer"
        ],
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/PersonAPIEntity"
          },
          "toLocation": {
            "items": {
              "$ref": "#/components/schemas/BookingLocationAPIEntity"
            },
            "type": "array"
          },
          "driverPosition": {
            "$ref": "#/components/schemas/LatLong"
          },
          "fromLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          },
          "ride": {
            "$ref": "#/components/schemas/RideAPIEntity"
          }
        }
      },
      "CallRes": {
        "type": "object",
        "required": [
          "callId"
        ],
        "properties": {
          "callId": {
            "type": "string"
          }
        }
      },
      "CallStatusAPIEntity": {
        "type": "object",
        "required": [
          "callStatusId",
          "rideId",
          "status"
        ],
        "properties": {
          "rideId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CallStatus"
          },
          "callStatusId": {
            "type": "string"
          }
        }
      },
      "CallStatus": {
        "type": "string",
        "enum": [
          "QUEUED",
          "RINGING",
          "IN_PROGRESS",
          "COMPLETED",
          "FAILED",
          "BUSY",
          "NO_ANSWER",
          "CANCELED",
          "INVALID_STATUS"
        ]
      },
      "AckResponse": {
        "type": "string",
        "enum": [
          "Ack"
        ]
      },
      "ExotelCallCallbackReq_CallAttachments": {
        "type": "object",
        "required": [
          "callSid",
          "eventType",
          "dateCreated",
          "dateUpdated",
          "from",
          "to",
          "status",
          "phoneNumberSid",
          "startTime",
          "endTime",
          "direction",
          "recordingUrl",
          "conversationDuration",
          "legs",
          "customField"
        ],
        "properties": {
          "eventType": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "conversationDuration": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "to": {
            "type": "string"
          },
          "callSid": {
            "type": "string"
          },
          "recordingUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "status": {
            "$ref": "#/components/schemas/ExotelCallStatus"
          },
          "endTime": {
            "type": "string"
          },
          "customField": {
            "$ref": "#/components/schemas/CallAttachments"
          },
          "legs": {
            "items": {
              "$ref": "#/components/schemas/ExotelLeg"
            },
            "type": "array"
          },
          "dateUpdated": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/ExotelDirection"
          },
          "phoneNumberSid": {
            "type": "string"
          }
        }
      },
      "ExotelCallStatus": {
        "type": "string",
        "enum": [
          "QUEUED",
          "RINGING",
          "IN_PROGRESS",
          "COMPLETED",
          "FAILED",
          "BUSY",
          "NO_ANSWER",
          "CANCELED",
          "INVALID_STATUS"
        ]
      },
      "ExotelDirection": {
        "type": "string",
        "enum": [
          "INBOUND",
          "OUTBOUND_DIAL",
          "OUTBOUND_API"
        ]
      },
      "BaseUrl": {
        "type": "string"
      },
      "ExotelLeg": {
        "type": "object",
        "required": [
          "onCallDuration",
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ExotelCallStatus"
          },
          "onCallDuration": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "CallAttachments": {
        "type": "object",
        "required": [
          "callStatusId",
          "rideId"
        ],
        "properties": {
          "rideId": {
            "type": "string"
          },
          "callStatusId": {
            "type": "string"
          }
        }
      },
      "SendIssueReq": {
        "type": "object",
        "required": [
          "issue"
        ],
        "properties": {
          "rideBookingId": {
            "type": "string"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue"
          },
          "contactEmail": {
            "type": "string"
          }
        }
      },
      "Issue": {
        "type": "object",
        "required": [
          "id",
          "customerId",
          "reason",
          "description",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "bookingId": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "GetRoutesReq": {
        "type": "object",
        "required": [
          "waypoints",
          "calcPoints"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/TravelMode"
          },
          "waypoints": {
            "items": {
              "$ref": "#/components/schemas/LatLong"
            },
            "type": "array",
            "minItems": 1
          },
          "calcPoints": {
            "type": "boolean"
          }
        }
      },
      "TravelMode": {
        "type": "string",
        "enum": [
          "CAR",
          "MOTORCYCLE",
          "BICYCLE",
          "FOOT"
        ]
      },
      "ServiceabilityRes": {
        "type": "object",
        "required": [
          "serviceable"
        ],
        "properties": {
          "specialLocation": {
            "$ref": "#/components/schemas/SpecialLocation"
          },
          "geoJson": {
            "type": "string"
          },
          "serviceable": {
            "type": "boolean"
          }
        }
      },
      "SpecialLocation": {
        "type": "object",
        "required": [
          "id",
          "locationName",
          "category",
          "gates",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "gates": {
            "items": {
              "$ref": "#/components/schemas/GatesInfo"
            },
            "type": "array"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "locationName": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "Category": {
        "type": "string",
        "enum": [
          "SureMetro",
          "SureAirport",
          "SureSchool",
          "SureHospital",
          "SureStation",
          "UnSureMetro",
          "UnSureAirport",
          "UnSureSchool",
          "UnSureHospital",
          "UnSureStation"
        ]
      },
      "GatesInfo": {
        "type": "object",
        "required": [
          "point",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "point": {
            "$ref": "#/components/schemas/LatLong"
          }
        }
      },
      "ServiceabilityReq": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLong"
          }
        }
      },
      "FeedbackReq": {
        "type": "object",
        "required": [
          "rideId",
          "rating"
        ],
        "properties": {
          "rideId": {
            "type": "string"
          },
          "feedbackDetails": {
            "type": "string"
          },
          "rating": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "LoginRes": {
        "type": "object",
        "required": [
          "auth_token",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "auth_token": {
            "type": "string"
          }
        }
      },
      "LoginReq": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "LogoutRes": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "OrderResp": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OrderDetails"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "startTime",
          "fromLocation",
          "rideBooking"
        ],
        "properties": {
          "travellerName": {
            "type": "string"
          },
          "rideBooking": {
            "$ref": "#/components/schemas/BookingAPIEntity"
          },
          "endTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "id": {
            "type": "string"
          },
          "toLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          },
          "fromLocation": {
            "$ref": "#/components/schemas/BookingLocationAPIEntity"
          },
          "travellerPhone": {
            "type": "string"
          },
          "startTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "AutoCompleteResp": {
        "type": "object",
        "required": [
          "predictions"
        ],
        "properties": {
          "predictions": {
            "items": {
              "$ref": "#/components/schemas/Prediction"
            },
            "type": "array"
          }
        }
      },
      "Prediction": {
        "type": "object",
        "required": [
          "description"
        ],
        "properties": {
          "distance": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "description": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          }
        }
      },
      "AutoCompleteReq": {
        "type": "object",
        "required": [
          "input",
          "location",
          "radius",
          "language"
        ],
        "properties": {
          "sessionToken": {
            "type": "string"
          },
          "input": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "strictbounds": {
            "type": "boolean"
          },
          "radius": {
            "type": "integer"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          },
          "origin": {
            "$ref": "#/components/schemas/LatLong"
          }
        }
      },
      "GetPlaceDetailsResp": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LatLong"
          }
        }
      },
      "GetPlaceDetailsReq": {
        "type": "object",
        "required": [
          "placeId"
        ],
        "properties": {
          "sessionToken": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          }
        }
      },
      "PlaceName": {
        "type": "object",
        "required": [
          "addressComponents",
          "location"
        ],
        "properties": {
          "plusCode": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LatLong"
          },
          "addressComponents": {
            "items": {
              "$ref": "#/components/schemas/AddressResp"
            },
            "type": "array"
          },
          "placeId": {
            "type": "string"
          },
          "formattedAddress": {
            "type": "string"
          }
        }
      },
      "AddressResp": {
        "type": "object",
        "required": [
          "longName",
          "shortName",
          "types"
        ],
        "properties": {
          "types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "longName": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          }
        }
      },
      "GetPlaceNameReq": {
        "type": "object",
        "required": [
          "getBy"
        ],
        "properties": {
          "sessionToken": {
            "type": "string"
          },
          "getBy": {
            "$ref": "#/components/schemas/GetPlaceNameBy"
          },
          "language": {
            "$ref": "#/components/schemas/Language"
          }
        }
      },
      "GetPlaceNameBy": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "tag",
              "contents"
            ],
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/LatLong"
              },
              "tag": {
                "type": "string",
                "enum": [
                  "ByLatLong"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tag",
              "contents"
            ],
            "properties": {
              "contents": {
                "type": "string"
              },
              "tag": {
                "type": "string",
                "enum": [
                  "ByPlaceId"
                ]
              }
            }
          }
        ]
      },
      "TranslateResp": {
        "type": "object",
        "required": [
          "_data"
        ],
        "properties": {
          "_data": {
            "$ref": "#/components/schemas/Translations"
          },
          "_error": {
            "$ref": "#/components/schemas/TranslateError"
          }
        }
      },
      "Translations": {
        "type": "object",
        "required": [
          "translations"
        ],
        "properties": {
          "translations": {
            "items": {
              "$ref": "#/components/schemas/TranslatedText"
            },
            "type": "array"
          }
        }
      },
      "TranslatedText": {
        "type": "object",
        "required": [
          "translatedText"
        ],
        "properties": {
          "translatedText": {
            "type": "string"
          }
        }
      },
      "TranslateError": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "CancellationReasonAPIEntity": {
        "type": "object",
        "required": [
          "reasonCode",
          "description"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "reasonCode": {
            "$ref": "#/components/schemas/CancellationReasonCode"
          }
        }
      },
      "CreateSavedReqLocationReq": {
        "type": "object",
        "required": [
          "lat",
          "lon",
          "tag"
        ],
        "properties": {
          "ward": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "city": {
            "type": "string"
          },
          "lon": {
            "type": "number",
            "format": "double"
          },
          "door": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "areaCode": {
            "type": "string"
          }
        }
      },
      "SavedReqLocationsListRes": {
        "type": "object",
        "required": [
          "list"
        ],
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/SavedReqLocationAPIEntity"
            },
            "type": "array"
          }
        }
      },
      "SavedReqLocationAPIEntity": {
        "type": "object",
        "required": [
          "lat",
          "lon",
          "tag"
        ],
        "properties": {
          "ward": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "city": {
            "type": "string"
          },
          "lon": {
            "type": "number",
            "format": "double"
          },
          "door": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          },
          "area": {
            "type": "string"
          },
          "areaCode": {
            "type": "string"
          }
        }
      },
      "WebengageRes": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "WebengageReq": {
        "type": "object",
        "required": [
          "version",
          "smsData",
          "metadata"
        ],
        "properties": {
          "smsData": {
            "$ref": "#/components/schemas/SmsData"
          },
          "metadata": {
            "$ref": "#/components/schemas/MetaData"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "SmsData": {
        "type": "object",
        "required": [
          "toNumber",
          "fromNumber",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "fromNumber": {
            "type": "string"
          },
          "toNumber": {
            "type": "string"
          }
        }
      },
      "MetaData": {
        "type": "object",
        "required": [
          "campaignType",
          "custom",
          "timestamp",
          "messageId",
          "indiaDLT"
        ],
        "properties": {
          "campaignType": {
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "messageId": {
            "type": "string"
          },
          "indiaDLT": {
            "$ref": "#/components/schemas/IndiaDLT"
          },
          "custom": {
            "$ref": "#/components/schemas/Custom"
          }
        }
      },
      "Custom": {
        "type": "object",
        "required": [
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string"
          }
        }
      },
      "IndiaDLT": {
        "type": "object",
        "required": [
          "principalEntityId",
          "contentTemplateId"
        ],
        "properties": {
          "contentTemplateId": {
            "type": "string"
          },
          "principalEntityId": {
            "type": "string"
          }
        }
      },
      "StatusRes": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "to",
          "status",
          "messageId",
          "smsCount"
        ],
        "properties": {
          "to": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SMSStatus"
          },
          "smsCount": {
            "type": "integer"
          }
        }
      },
      "SMSStatus": {
        "type": "object",
        "required": [
          "description",
          "groupId",
          "groupName",
          "id",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "groupId": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "GetPersonFlowStatusRes": {
        "type": "object",
        "required": [
          "currentStatus"
        ],
        "properties": {
          "currentStatus": {
            "$ref": "#/components/schemas/FlowStatus"
          },
          "oldStatus": {
            "$ref": "#/components/schemas/FlowStatus"
          }
        }
      },
      "FlowStatus": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "status"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "IDLE"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "requestId",
              "validTill",
              "status"
            ],
            "properties": {
              "requestId": {
                "type": "string"
              },
              "validTill": {
                "$ref": "#/components/schemas/UTCTime"
              },
              "status": {
                "type": "string",
                "enum": [
                  "SEARCHING"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "requestId",
              "validTill",
              "status"
            ],
            "properties": {
              "requestId": {
                "type": "string"
              },
              "validTill": {
                "$ref": "#/components/schemas/UTCTime"
              },
              "status": {
                "type": "string",
                "enum": [
                  "GOT_ESTIMATE"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "estimateId",
              "validTill",
              "status"
            ],
            "properties": {
              "validTill": {
                "$ref": "#/components/schemas/UTCTime"
              },
              "estimateId": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "WAITING_FOR_DRIVER_OFFERS"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "estimateId",
              "validTill",
              "status"
            ],
            "properties": {
              "validTill": {
                "$ref": "#/components/schemas/UTCTime"
              },
              "estimateId": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "DRIVER_OFFERED_QUOTE"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "bookingId",
              "validTill",
              "status"
            ],
            "properties": {
              "validTill": {
                "$ref": "#/components/schemas/UTCTime"
              },
              "status": {
                "type": "string",
                "enum": [
                  "WAITING_FOR_DRIVER_ASSIGNMENT"
                ]
              },
              "bookingId": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rideId",
              "status"
            ],
            "properties": {
              "rideId": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "RIDE_ASSIGNED"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rideId",
              "bookingId",
              "otp",
              "vehicleNumber",
              "fromLocation",
              "status"
            ],
            "properties": {
              "rideId": {
                "type": "string"
              },
              "vehicleNumber": {
                "type": "string"
              },
              "driverLocation": {
                "$ref": "#/components/schemas/LatLong"
              },
              "status": {
                "type": "string",
                "enum": [
                  "RIDE_PICKUP"
                ]
              },
              "trackingUrl": {
                "$ref": "#/components/schemas/BaseUrl"
              },
              "fromLocation": {
                "$ref": "#/components/schemas/LatLong"
              },
              "bookingId": {
                "type": "string"
              },
              "otp": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rideId",
              "bookingId",
              "status"
            ],
            "properties": {
              "rideId": {
                "type": "string"
              },
              "driverLocation": {
                "$ref": "#/components/schemas/LatLong"
              },
              "status": {
                "type": "string",
                "enum": [
                  "RIDE_STARTED"
                ]
              },
              "trackingUrl": {
                "$ref": "#/components/schemas/BaseUrl"
              },
              "bookingId": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rideId",
              "status"
            ],
            "properties": {
              "rideId": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING_RATING"
                ]
              }
            }
          }
        ]
      },
      "NotifyEventReq": {
        "type": "object",
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "$ref": "#/components/schemas/FrontendEvent"
          }
        }
      },
      "FrontendEvent": {
        "type": "string",
        "enum": [
          "RATE_DRIVER_SKIPPED",
          "SEARCH_CANCELLED"
        ]
      },
      "OptAPIRequest": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/OptApiMethods"
          }
        }
      },
      "SosRes": {
        "type": "object",
        "required": [
          "sosId"
        ],
        "properties": {
          "sosId": {
            "type": "string"
          }
        }
      },
      "SosReq": {
        "type": "object",
        "required": [
          "flow",
          "rideId"
        ],
        "properties": {
          "rideId": {
            "type": "string"
          },
          "flow": {
            "$ref": "#/components/schemas/SosType"
          }
        }
      },
      "SosType": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "tag"
            ],
            "properties": {
              "tag": {
                "type": "string",
                "enum": [
                  "Police"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tag"
            ],
            "properties": {
              "tag": {
                "type": "string",
                "enum": [
                  "CustomerCare"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tag",
              "contents"
            ],
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/EmergencyContactId"
              },
              "tag": {
                "type": "string",
                "enum": [
                  "EmergencyContact"
                ]
              }
            }
          }
        ]
      },
      "EmergencyContactId": {
        "type": "string"
      },
      "SosFeedbackReq": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SosStatus"
          }
        }
      },
      "SosStatus": {
        "type": "string",
        "enum": [
          "Resolved",
          "NotResolved",
          "Pending"
        ]
      },
      "BecknCallbackReq_OnSearchMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnSearchMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "Context": {
        "type": "object",
        "required": [
          "domain",
          "country",
          "city",
          "action",
          "core_version",
          "bap_id",
          "bap_uri",
          "message_id",
          "timestamp"
        ],
        "properties": {
          "country": {
            "type": "string"
          },
          "bpp_uri": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "timestamp": {
            "$ref": "#/components/schemas/UTCTimeRFC3339"
          },
          "bap_id": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "bpp_id": {
            "type": "string"
          },
          "message_id": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "core_version": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          },
          "bap_uri": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "Domain": {
        "type": "string",
        "enum": [
          "nic2004:60221",
          "nic2004:52110",
          "FOOD-AND-BEVERAGE",
          "HEALTHCARE",
          "nic2004:60212",
          "nic2004:63031",
          "nic2004:63032",
          "nic2004:60232"
        ]
      },
      "Action": {
        "type": "string",
        "enum": [
          "SEARCH",
          "SELECT",
          "INIT",
          "CONFIRM",
          "UPDATE",
          "STATUS",
          "TRACK",
          "CANCEL",
          "RATING",
          "SUPPORT",
          "ON_SEARCH",
          "ON_SELECT",
          "ON_INIT",
          "ON_CONFIRM",
          "ON_UPDATE",
          "ON_STATUS",
          "ON_TRACK",
          "ON_CANCEL",
          "ON_RATING",
          "ON_SUPPORT"
        ]
      },
      "UTCTimeRFC3339": {
        "type": "string",
        "description": "UTCTimeRFC3339 is a representation of UTCTime in milliseconds instead of microseconds."
      },
      "Error": {
        "type": "object",
        "required": [
          "_type",
          "code"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "_type": {
            "$ref": "#/components/schemas/ErrorType"
          }
        }
      },
      "ErrorType": {
        "type": "string",
        "enum": [
          "CONTEXT_ERROR",
          "CORE_ERROR",
          "INTERNAL_ERROR",
          "DOMAIN_ERROR",
          "POLICY_ERROR",
          "JSON_SCHEMA_ERROR"
        ]
      },
      "OnSearchMessage": {
        "type": "object",
        "required": [
          "catalog"
        ],
        "properties": {
          "catalog": {
            "type": "object",
            "required": [
              "bpp/descriptor",
              "bpp/providers"
            ],
            "properties": {
              "bpp/providers": {
                "items": {
                  "type": "object",
                  "required": [
                    "id",
                    "descriptor",
                    "locations",
                    "categories",
                    "items",
                    "offers",
                    "add_ons",
                    "fulfillments",
                    "./komn/contacts",
                    "tags",
                    "payment"
                  ],
                  "properties": {
                    "tags": {
                      "type": "object",
                      "required": [
                        "./komn/rides_inprogress",
                        "./komn/rides_completed",
                        "./komn/rides_confirmed"
                      ],
                      "properties": {
                        "./komn/rides_confirmed": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        },
                        "./komn/rides_inprogress": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        },
                        "./komn/rides_completed": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        }
                      }
                    },
                    "fulfillments": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "start",
                          "vehicle"
                        ],
                        "properties": {
                          "start": {
                            "type": "object",
                            "required": [
                              "location",
                              "time"
                            ],
                            "properties": {
                              "time": {
                                "$ref": "#/components/schemas/TimeTimestamp"
                              },
                              "location": {
                                "type": "object",
                                "required": [
                                  "gps"
                                ],
                                "properties": {
                                  "gps": {
                                    "$ref": "#/components/schemas/Gps"
                                  },
                                  "address": {
                                    "type": "object",
                                    "properties": {
                                      "ward": {
                                        "type": "string"
                                      },
                                      "country": {
                                        "type": "string"
                                      },
                                      "building": {
                                        "type": "string"
                                      },
                                      "state": {
                                        "type": "string"
                                      },
                                      "city": {
                                        "type": "string"
                                      },
                                      "locality": {
                                        "type": "string"
                                      },
                                      "door": {
                                        "type": "string"
                                      },
                                      "area_code": {
                                        "type": "string"
                                      },
                                      "street": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "id": {
                            "type": "string"
                          },
                          "vehicle": {
                            "type": "object",
                            "required": [
                              "category"
                            ],
                            "properties": {
                              "category": {
                                "$ref": "#/components/schemas/VehicleVariant"
                              }
                            }
                          },
                          "end": {
                            "type": "object",
                            "required": [
                              "location"
                            ],
                            "properties": {
                              "location": {
                                "type": "object",
                                "required": [
                                  "gps"
                                ],
                                "properties": {
                                  "gps": {
                                    "$ref": "#/components/schemas/Gps"
                                  },
                                  "address": {
                                    "type": "object",
                                    "properties": {
                                      "ward": {
                                        "type": "string"
                                      },
                                      "country": {
                                        "type": "string"
                                      },
                                      "building": {
                                        "type": "string"
                                      },
                                      "state": {
                                        "type": "string"
                                      },
                                      "city": {
                                        "type": "string"
                                      },
                                      "locality": {
                                        "type": "string"
                                      },
                                      "door": {
                                        "type": "string"
                                      },
                                      "area_code": {
                                        "type": "string"
                                      },
                                      "street": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "type": "array"
                    },
                    "items": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "category_id",
                          "id",
                          "fulfillment_id",
                          "price",
                          "descriptor",
                          "./komn/quote_terms"
                        ],
                        "properties": {
                          "tags": {
                            "type": "object",
                            "required": [
                              "drivers_location"
                            ],
                            "properties": {
                              "drivers_location": {
                                "items": {
                                  "$ref": "#/components/schemas/LatLong"
                                },
                                "type": "array"
                              },
                              "./komn/night_shift_start": {
                                "$ref": "#/components/schemas/TimeOfDay"
                              },
                              "night_shift_charge": {
                                "minimum": -9223372036854776000,
                                "type": "integer",
                                "maximum": 9223372036854776000
                              },
                              "./komn/night_shift_end": {
                                "$ref": "#/components/schemas/TimeOfDay"
                              },
                              "./komn/waiting_charge_per_min": {
                                "minimum": -9223372036854776000,
                                "type": "integer",
                                "maximum": 9223372036854776000
                              },
                              "./komn/distance_to_nearest_driver": {
                                "$ref": "#/components/schemas/DecimalValue"
                              },
                              "old_night_shift_charge": {
                                "$ref": "#/components/schemas/DecimalValue"
                              }
                            }
                          },
                          "offer_id": {
                            "type": "string"
                          },
                          "fulfillment_id": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "price": {
                            "type": "object",
                            "required": [
                              "currency",
                              "value",
                              "offered_value",
                              "minimum_value",
                              "maximum_value",
                              "value_breakup"
                            ],
                            "properties": {
                              "value_breakup": {
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "title",
                                    "price"
                                  ],
                                  "properties": {
                                    "price": {
                                      "type": "object",
                                      "required": [
                                        "currency",
                                        "value"
                                      ],
                                      "properties": {
                                        "currency": {
                                          "type": "string"
                                        },
                                        "value": {
                                          "$ref": "#/components/schemas/DecimalValue"
                                        }
                                      }
                                    },
                                    "title": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "type": "array"
                              },
                              "maximum_value": {
                                "$ref": "#/components/schemas/DecimalValue"
                              },
                              "currency": {
                                "type": "string"
                              },
                              "offered_value": {
                                "$ref": "#/components/schemas/DecimalValue"
                              },
                              "minimum_value": {
                                "$ref": "#/components/schemas/DecimalValue"
                              },
                              "value": {
                                "$ref": "#/components/schemas/DecimalValue"
                              }
                            }
                          },
                          "category_id": {
                            "$ref": "#/components/schemas/FareProductType"
                          },
                          "./komn/quote_terms": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "descriptor": {
                            "type": "object",
                            "required": [
                              "name",
                              "code"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "./komn/rental/base_duration_hr": {
                            "minimum": -9223372036854776000,
                            "type": "integer",
                            "maximum": 9223372036854776000
                          },
                          "./komn/rental/base_distance_km": {
                            "minimum": -9223372036854776000,
                            "type": "integer",
                            "maximum": 9223372036854776000
                          }
                        }
                      },
                      "type": "array"
                    },
                    "offers": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "descriptor"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "descriptor": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "type": "array"
                    },
                    "add_ons": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "descriptor",
                          "price"
                        ],
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "price": {
                            "$ref": "#/components/schemas/Price"
                          },
                          "descriptor": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "type": "array"
                    },
                    "id": {
                      "type": "string"
                    },
                    "payment": {
                      "$ref": "#/components/schemas/Payment"
                    },
                    "categories": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "descriptor"
                        ],
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/FareProductType"
                          },
                          "descriptor": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "type": "array"
                    },
                    "descriptor": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "locations": {
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "gps"
                        ],
                        "properties": {
                          "gps": {
                            "$ref": "#/components/schemas/Gps"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      },
                      "type": "array"
                    },
                    "./komn/contacts": {
                      "type": "string"
                    }
                  }
                },
                "type": "array",
                "minItems": 1
              },
              "bpp/descriptor": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Gps": {
        "type": "object",
        "required": [
          "lat",
          "lon"
        ],
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "FareProductType": {
        "type": "string",
        "enum": [
          "ONE_WAY_TRIP",
          "RENTAL_TRIP",
          "DRIVER_OFFER_ESTIMATE",
          "DRIVER_OFFER",
          "ONE_WAY_SPECIAL_ZONE"
        ]
      },
      "DecimalValue": {
        "type": "string",
        "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
        "description": "Decimal value in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Maximum allowed precision (total number of digits) is 30 String format is used to prevent loss of precision."
      },
      "Price": {
        "type": "object",
        "properties": {
          "computed_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "maximum_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "currency": {
            "type": "string"
          },
          "offered_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "estimated_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "listed_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "minimum_value": {
            "$ref": "#/components/schemas/DecimalValue"
          },
          "value": {
            "$ref": "#/components/schemas/DecimalValue"
          }
        }
      },
      "TimeTimestamp": {
        "type": "object",
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "Payment": {
        "type": "object",
        "required": [
          "collected_by",
          "_type",
          "time"
        ],
        "properties": {
          "time": {
            "$ref": "#/components/schemas/TimeDuration"
          },
          "collected_by": {
            "type": "string"
          },
          "_type": {
            "type": "string",
            "enum": [
              "ON-ORDER",
              "PRE-FULFILLMENT",
              "ON-FULFILLMENT",
              "POST-FULFILLMENT"
            ]
          }
        }
      },
      "TimeDuration": {
        "type": "object",
        "required": [
          "duration"
        ],
        "properties": {
          "duration": {
            "type": "string"
          }
        }
      },
      "BecknCallbackReq_OnSelectMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnSelectMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnSelectMessage": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "object",
            "required": [
              "provider"
            ],
            "properties": {
              "provider": {
                "type": "object",
                "required": [
                  "id",
                  "descriptor",
                  "locations",
                  "categories",
                  "items",
                  "offers",
                  "add_ons",
                  "fulfillments",
                  "./komn/contacts",
                  "tags",
                  "payment"
                ],
                "properties": {
                  "tags": {
                    "type": "object",
                    "required": [
                      "./komn/rides_inprogress",
                      "./komn/rides_completed",
                      "./komn/rides_confirmed"
                    ],
                    "properties": {
                      "./komn/rides_confirmed": {
                        "minimum": -9223372036854776000,
                        "type": "integer",
                        "maximum": 9223372036854776000
                      },
                      "./komn/rides_inprogress": {
                        "minimum": -9223372036854776000,
                        "type": "integer",
                        "maximum": 9223372036854776000
                      },
                      "./komn/rides_completed": {
                        "minimum": -9223372036854776000,
                        "type": "integer",
                        "maximum": 9223372036854776000
                      }
                    }
                  },
                  "fulfillments": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "start",
                        "vehicle"
                      ],
                      "properties": {
                        "start": {
                          "type": "object",
                          "required": [
                            "location",
                            "time"
                          ],
                          "properties": {
                            "time": {
                              "$ref": "#/components/schemas/TimeTimestamp"
                            },
                            "location": {
                              "type": "object",
                              "required": [
                                "gps"
                              ],
                              "properties": {
                                "gps": {
                                  "$ref": "#/components/schemas/Gps"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        },
                        "vehicle": {
                          "type": "object",
                          "required": [
                            "category"
                          ],
                          "properties": {
                            "category": {
                              "$ref": "#/components/schemas/VehicleVariant"
                            }
                          }
                        },
                        "end": {
                          "type": "object",
                          "required": [
                            "location"
                          ],
                          "properties": {
                            "location": {
                              "type": "object",
                              "required": [
                                "gps"
                              ],
                              "properties": {
                                "gps": {
                                  "$ref": "#/components/schemas/Gps"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "type": "array"
                  },
                  "items": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "category_id",
                        "fulfillment_id",
                        "price",
                        "descriptor",
                        "./komn/quote_terms"
                      ],
                      "properties": {
                        "tags": {
                          "type": "object",
                          "required": [
                            "./komn/distance_to_nearest_driver"
                          ],
                          "properties": {
                            "./komn/distance_to_nearest_driver": {
                              "$ref": "#/components/schemas/DecimalValue"
                            }
                          }
                        },
                        "duration_to_pickup": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        },
                        "offer_id": {
                          "type": "string"
                        },
                        "fulfillment_id": {
                          "type": "string"
                        },
                        "valid_till": {
                          "$ref": "#/components/schemas/UTCTime"
                        },
                        "id": {
                          "type": "string"
                        },
                        "price": {
                          "type": "object",
                          "required": [
                            "currency",
                            "value",
                            "offered_value"
                          ],
                          "properties": {
                            "currency": {
                              "type": "string"
                            },
                            "offered_value": {
                              "$ref": "#/components/schemas/DecimalValue"
                            },
                            "value": {
                              "$ref": "#/components/schemas/DecimalValue"
                            }
                          }
                        },
                        "category_id": {
                          "$ref": "#/components/schemas/FareProductType"
                        },
                        "./komn/quote_terms": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "driver_name": {
                          "type": "string"
                        },
                        "descriptor": {
                          "type": "object",
                          "required": [
                            "name",
                            "code"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "./komn/rental/base_duration_hr": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        },
                        "rating": {
                          "$ref": "#/components/schemas/Centesimal"
                        },
                        "./komn/rental/base_distance_km": {
                          "minimum": -9223372036854776000,
                          "type": "integer",
                          "maximum": 9223372036854776000
                        }
                      }
                    },
                    "type": "array"
                  },
                  "offers": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "descriptor"
                      ],
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "descriptor": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "type": "array"
                  },
                  "add_ons": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "descriptor",
                        "price"
                      ],
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "price": {
                          "$ref": "#/components/schemas/Price"
                        },
                        "descriptor": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "type": "array"
                  },
                  "id": {
                    "type": "string"
                  },
                  "payment": {
                    "$ref": "#/components/schemas/Payment"
                  },
                  "categories": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "descriptor"
                      ],
                      "properties": {
                        "id": {
                          "$ref": "#/components/schemas/FareProductType"
                        },
                        "descriptor": {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "type": "array"
                  },
                  "descriptor": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "locations": {
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "gps"
                      ],
                      "properties": {
                        "gps": {
                          "$ref": "#/components/schemas/Gps"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "./komn/contacts": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "BecknCallbackReq_OnInitMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnInitMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnInitMessage": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "object",
            "required": [
              "id",
              "state",
              "quote",
              "payment"
            ],
            "properties": {
              "state": {
                "$ref": "#/components/schemas/OrderState"
              },
              "id": {
                "type": "string"
              },
              "quote": {
                "type": "object",
                "required": [
                  "price",
                  "breakup"
                ],
                "properties": {
                  "breakup": {
                    "items": {
                      "type": "object",
                      "required": [
                        "title",
                        "price"
                      ],
                      "properties": {
                        "price": {
                          "type": "object",
                          "required": [
                            "currency",
                            "value"
                          ],
                          "properties": {
                            "currency": {
                              "type": "string"
                            },
                            "value": {
                              "$ref": "#/components/schemas/DecimalValue"
                            }
                          }
                        },
                        "title": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "price": {
                    "type": "object",
                    "required": [
                      "currency",
                      "value",
                      "offered_value"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "offered_value": {
                        "$ref": "#/components/schemas/DecimalValue"
                      },
                      "value": {
                        "$ref": "#/components/schemas/DecimalValue"
                      }
                    }
                  }
                }
              },
              "payment": {
                "type": "object",
                "required": [
                  "collected_by",
                  "params",
                  "type",
                  "time"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "ON-ORDER",
                      "PRE-FULFILLMENT",
                      "ON-FULFILLMENT",
                      "POST-FULFILLMENT"
                    ]
                  },
                  "time": {
                    "$ref": "#/components/schemas/TimeDuration"
                  },
                  "collected_by": {
                    "type": "string"
                  },
                  "params": {
                    "type": "object",
                    "required": [
                      "currency",
                      "amount"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/DecimalValue"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "OrderState": {
        "type": "string",
        "enum": [
          "NEW",
          "ACTIVE",
          "CONFIRMED"
        ]
      },
      "BecknCallbackReq_OnConfirmMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnConfirmMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnConfirmMessage": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "object",
            "required": [
              "id",
              "state",
              "items",
              "fulfillment",
              "quote",
              "payment"
            ],
            "properties": {
              "items": {
                "items": {
                  "type": "object",
                  "required": [
                    "descriptor"
                  ],
                  "properties": {
                    "descriptor": {
                      "type": "object",
                      "required": [
                        "code"
                      ],
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "type": "array"
              },
              "fulfillment": {
                "type": "object",
                "required": [
                  "state",
                  "start"
                ],
                "properties": {
                  "start": {
                    "type": "object",
                    "required": [
                      "time",
                      "location"
                    ],
                    "properties": {
                      "time": {
                        "$ref": "#/components/schemas/TimeTimestamp"
                      },
                      "location": {
                        "type": "object",
                        "required": [
                          "gps",
                          "address"
                        ],
                        "properties": {
                          "gps": {
                            "$ref": "#/components/schemas/Gps"
                          },
                          "address": {
                            "type": "object",
                            "properties": {
                              "ward": {
                                "type": "string"
                              },
                              "country": {
                                "type": "string"
                              },
                              "building": {
                                "type": "string"
                              },
                              "state": {
                                "type": "string"
                              },
                              "city": {
                                "type": "string"
                              },
                              "locality": {
                                "type": "string"
                              },
                              "door": {
                                "type": "string"
                              },
                              "area_code": {
                                "type": "string"
                              },
                              "street": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "authorization": {
                        "type": "object",
                        "required": [
                          "type",
                          "token"
                        ],
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "state": {
                    "type": "object",
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string"
                      }
                    }
                  },
                  "end": {
                    "type": "object",
                    "required": [
                      "location"
                    ],
                    "properties": {
                      "location": {
                        "type": "object",
                        "required": [
                          "gps",
                          "address"
                        ],
                        "properties": {
                          "gps": {
                            "$ref": "#/components/schemas/Gps"
                          },
                          "address": {
                            "type": "object",
                            "properties": {
                              "ward": {
                                "type": "string"
                              },
                              "country": {
                                "type": "string"
                              },
                              "building": {
                                "type": "string"
                              },
                              "state": {
                                "type": "string"
                              },
                              "city": {
                                "type": "string"
                              },
                              "locality": {
                                "type": "string"
                              },
                              "door": {
                                "type": "string"
                              },
                              "area_code": {
                                "type": "string"
                              },
                              "street": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "state": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "quote": {
                "type": "object",
                "required": [
                  "price",
                  "breakup"
                ],
                "properties": {
                  "breakup": {
                    "items": {
                      "type": "object",
                      "required": [
                        "title",
                        "price"
                      ],
                      "properties": {
                        "price": {
                          "type": "object",
                          "required": [
                            "currency",
                            "value"
                          ],
                          "properties": {
                            "currency": {
                              "type": "string"
                            },
                            "value": {
                              "$ref": "#/components/schemas/DecimalValue"
                            }
                          }
                        },
                        "title": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "price": {
                    "type": "object",
                    "required": [
                      "currency",
                      "value",
                      "offered_value"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "offered_value": {
                        "$ref": "#/components/schemas/DecimalValue"
                      },
                      "value": {
                        "$ref": "#/components/schemas/DecimalValue"
                      }
                    }
                  }
                }
              },
              "payment": {
                "type": "object",
                "required": [
                  "collected_by",
                  "params",
                  "type",
                  "time"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "ON-ORDER",
                      "PRE-FULFILLMENT",
                      "ON-FULFILLMENT",
                      "POST-FULFILLMENT"
                    ]
                  },
                  "time": {
                    "$ref": "#/components/schemas/TimeDuration"
                  },
                  "collected_by": {
                    "type": "string"
                  },
                  "params": {
                    "type": "object",
                    "required": [
                      "currency",
                      "amount"
                    ],
                    "properties": {
                      "currency": {
                        "type": "string"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/DecimalValue"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BecknCallbackReq_OnUpdateMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnUpdateMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnUpdateMessage": {
        "type": "object",
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "$ref": "#/components/schemas/OnUpdateEvent"
          }
        }
      },
      "OnUpdateEvent": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/RideAssignedEvent"
          },
          {
            "$ref": "#/components/schemas/RideStartedEvent"
          },
          {
            "$ref": "#/components/schemas/RideCompletedEvent"
          },
          {
            "$ref": "#/components/schemas/BookingCancelledEvent"
          },
          {
            "$ref": "#/components/schemas/BookingReallocationEvent"
          },
          {
            "$ref": "#/components/schemas/DriverArrivedEvent"
          },
          {
            "$ref": "#/components/schemas/EstimateRepetitionEvent"
          },
          {
            "$ref": "#/components/schemas/NewMessageEvent"
          }
        ]
      },
      "RideAssignedEvent": {
        "type": "object",
        "required": [
          "id",
          "state",
          "./komn/update_target",
          "fulfillment"
        ],
        "properties": {
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "start",
              "agent",
              "vehicle",
              "state"
            ],
            "properties": {
              "start": {
                "type": "object",
                "required": [
                  "authorization"
                ],
                "properties": {
                  "authorization": {
                    "type": "object",
                    "required": [
                      "type",
                      "token"
                    ],
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              },
              "vehicle": {
                "type": "object",
                "required": [
                  "model",
                  "variant",
                  "color",
                  "registration"
                ],
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "variant": {
                    "type": "string"
                  },
                  "registration": {
                    "type": "string"
                  }
                }
              },
              "agent": {
                "type": "object",
                "required": [
                  "name",
                  "phone",
                  "tags"
                ],
                "properties": {
                  "tags": {
                    "type": "object",
                    "required": [
                      "./komn/registered_at"
                    ],
                    "properties": {
                      "./komn/registered_at": {
                        "type": "string",
                        "format": "yyyy-mm-ddThh:MM:ssZ",
                        "example": "2016-07-22T00:00:00Z"
                      }
                    }
                  },
                  "name": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "string",
                    "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
                    "description": "Decimal value in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Maximum allowed precision (total number of digits) is 30 String format is used to prevent loss of precision."
                  }
                }
              }
            }
          },
          "state": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "OnUpdateEventType": {
        "type": "string",
        "enum": [
          "RIDE_COMPLETED",
          "RIDE_STARTED",
          "RIDE_ASSIGNED",
          "RIDE_BOOKING_CANCELLED",
          "RIDE_BOOKING_REALLOCATION",
          "DRIVER_ARRIVED",
          "ESTIMATE_REPETITION",
          "NEW_MESSAGE"
        ]
      },
      "RideStartedEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "fulfillment"
        ],
        "properties": {
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "RideCompletedEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "quote",
          "fulfillment"
        ],
        "properties": {
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "./komn/chargeable_distance",
              "state"
            ],
            "properties": {
              "./komn/chargeable_distance": {
                "type": "string",
                "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
                "description": "Decimal value in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Maximum allowed precision (total number of digits) is 30 String format is used to prevent loss of precision."
              },
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "end_location": {
                "type": "object",
                "required": [
                  "latLon",
                  "address"
                ],
                "properties": {
                  "latLon": {
                    "type": "string",
                    "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?, [-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
                    "example": "123.321, 123.321",
                    "description": "Gps value in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Lat and Long parts are separated with a comma. String format is used to prevent loss of precision."
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "ward": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "building": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "locality": {
                        "type": "string"
                      },
                      "door": {
                        "type": "string"
                      },
                      "area_code": {
                        "type": "string"
                      },
                      "street": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "id": {
                "type": "string"
              },
              "start_location": {
                "type": "object",
                "required": [
                  "latLon",
                  "address"
                ],
                "properties": {
                  "latLon": {
                    "type": "string",
                    "format": "[-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?, [-]?(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?",
                    "example": "123.321, 123.321",
                    "description": "Gps value in a string representation with an optional leading \"-\" for negative numbers. Integer and fractional parts are separated with a dot.Lat and Long parts are separated with a comma. String format is used to prevent loss of precision."
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "ward": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "building": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "locality": {
                        "type": "string"
                      },
                      "door": {
                        "type": "string"
                      },
                      "area_code": {
                        "type": "string"
                      },
                      "street": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "id": {
            "type": "string"
          },
          "quote": {
            "type": "object",
            "required": [
              "price",
              "breakup"
            ],
            "properties": {
              "breakup": {
                "items": {
                  "type": "object",
                  "required": [
                    "title",
                    "price"
                  ],
                  "properties": {
                    "price": {
                      "type": "object",
                      "required": [
                        "currency",
                        "value"
                      ],
                      "properties": {
                        "currency": {
                          "type": "string"
                        },
                        "value": {
                          "$ref": "#/components/schemas/DecimalValue"
                        }
                      }
                    },
                    "title": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              },
              "price": {
                "type": "object",
                "required": [
                  "currency",
                  "value",
                  "computed_value"
                ],
                "properties": {
                  "computed_value": {
                    "$ref": "#/components/schemas/DecimalValue"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/components/schemas/DecimalValue"
                  }
                }
              }
            }
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "BookingCancelledEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "state",
          "./komn/cancellation_reason",
          "fulfillment"
        ],
        "properties": {
          "fulfillment": {
            "type": "object",
            "required": [
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              }
            }
          },
          "state": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          },
          "./komn/cancellation_reason": {
            "$ref": "#/components/schemas/CancellationSource"
          }
        }
      },
      "CancellationSource": {
        "type": "string",
        "enum": [
          "CANCELLED_BY_USER",
          "CANCELLED_BY_DRIVER",
          "CANCELLED_BY_MERCHANT",
          "CANCELLED_BY_ALLOCATOR",
          "CANCELLED_BY_APPLICATION"
        ]
      },
      "BookingReallocationEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "./komn/reallocation_reason",
          "fulfillment"
        ],
        "properties": {
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              }
            }
          },
          "./komn/reallocation_reason": {
            "$ref": "#/components/schemas/CancellationSource"
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "DriverArrivedEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "fulfillment",
          "arrival_time"
        ],
        "properties": {
          "arrival_time": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "EstimateRepetitionEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "./komn/cancellation_reason",
          "fulfillment",
          "./komn/item"
        ],
        "properties": {
          "./komn/item": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          },
          "./komn/cancellation_reason": {
            "$ref": "#/components/schemas/CancellationSource"
          }
        }
      },
      "NewMessageEvent": {
        "type": "object",
        "required": [
          "id",
          "./komn/update_target",
          "fulfillment",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "fulfillment": {
            "type": "object",
            "required": [
              "id",
              "state"
            ],
            "properties": {
              "state": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "$ref": "#/components/schemas/OnUpdateEventType"
                  }
                }
              },
              "id": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "string"
          },
          "./komn/update_target": {
            "type": "string"
          }
        }
      },
      "BecknCallbackReq_OnTrackMessage": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnTrackMessage"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnTrackMessage": {
        "type": "object",
        "required": [
          "tracking"
        ],
        "properties": {
          "tracking": {
            "type": "object",
            "required": [
              "url",
              "./komn/content-type"
            ],
            "properties": {
              "./komn/content-type": {
                "type": "string"
              },
              "url": {
                "$ref": "#/components/schemas/BaseUrl"
              }
            }
          }
        }
      },
      "BecknCallbackReq_OnSearchCatalog": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "context",
              "message"
            ],
            "properties": {
              "message": {
                "$ref": "#/components/schemas/OnSearchCatalog"
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "context",
              "error"
            ],
            "properties": {
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        ]
      },
      "OnSearchCatalog": {
        "type": "object",
        "required": [
          "catalog"
        ],
        "properties": {
          "catalog": {
            "$ref": "#/components/schemas/Catalog"
          }
        }
      },
      "Catalog": {
        "type": "object",
        "required": [
          "bpp_descriptor",
          "bpp_providers"
        ],
        "properties": {
          "bpp_providers": {
            "items": {
              "$ref": "#/components/schemas/Provider"
            },
            "type": "array"
          },
          "bpp_descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          }
        }
      },
      "Descriptor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "audio": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "long_desc": {
            "type": "string"
          },
          "short_desc": {
            "type": "string"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "type": "array"
          },
          "_3d_render": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "Image": {
        "type": "string"
      },
      "Provider": {
        "type": "object",
        "required": [
          "id",
          "descriptor",
          "items",
          "fulfillments"
        ],
        "properties": {
          "fulfillments": {
            "items": {
              "$ref": "#/components/schemas/Fulfillment"
            },
            "type": "array"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          }
        }
      },
      "Item": {
        "type": "object",
        "required": [
          "id",
          "descriptor",
          "price",
          "fulfillment_id",
          "matched"
        ],
        "properties": {
          "matched": {
            "type": "boolean"
          },
          "fulfillment_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "descriptor": {
            "$ref": "#/components/schemas/Descriptor"
          }
        }
      },
      "Fulfillment": {
        "type": "object",
        "required": [
          "id",
          "start",
          "end",
          "vehicle"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/schemas/FulfillmentDetails"
          },
          "id": {
            "type": "string"
          },
          "vehicle": {
            "$ref": "#/components/schemas/Vehicle"
          },
          "end": {
            "$ref": "#/components/schemas/FulfillmentDetails"
          }
        }
      },
      "FulfillmentDetails": {
        "type": "object",
        "required": [
          "location",
          "time"
        ],
        "properties": {
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "Location": {
        "type": "object",
        "required": [
          "id",
          "lat",
          "lon",
          "address",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "lat": {
            "type": "number",
            "format": "double"
          },
          "address": {
            "$ref": "#/components/schemas/LocationAddress"
          },
          "lon": {
            "type": "number",
            "format": "double"
          },
          "createdAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "Time": {
        "type": "object",
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "Vehicle": {
        "type": "object",
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "type": "string"
          }
        }
      },
      "CustomerListRes": {
        "type": "object",
        "required": [
          "totalItems",
          "summary",
          "customers"
        ],
        "properties": {
          "totalItems": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "summary": {
            "$ref": "#/components/schemas/Summary"
          },
          "customers": {
            "items": {
              "$ref": "#/components/schemas/CustomerListItem"
            },
            "type": "array"
          }
        }
      },
      "Summary": {
        "type": "object",
        "required": [
          "totalCount",
          "count"
        ],
        "properties": {
          "count": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "totalCount": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "CustomerListItem": {
        "type": "object",
        "required": [
          "customerId",
          "enabled",
          "blocked"
        ],
        "properties": {
          "customerId": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "phoneNo": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "blocked": {
            "type": "boolean"
          },
          "middleName": {
            "type": "string"
          }
        }
      },
      "CustomerInfoRes": {
        "type": "object",
        "required": [
          "numberOfRides"
        ],
        "properties": {
          "numberOfRides": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "StuckBookingsCancelRes": {
        "type": "object",
        "required": [
          "cancelledBookings"
        ],
        "properties": {
          "cancelledBookings": {
            "items": {
              "$ref": "#/components/schemas/StuckBookingItem"
            },
            "type": "array"
          }
        }
      },
      "StuckBookingItem": {
        "type": "object",
        "required": [
          "bookingId"
        ],
        "properties": {
          "rideId": {
            "type": "string"
          },
          "bookingId": {
            "type": "string"
          }
        }
      },
      "StuckBookingsCancelReq": {
        "type": "object",
        "required": [
          "bookingIds"
        ],
        "properties": {
          "bookingIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "MerchantUpdateReq": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "gatewayUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "fcmConfig": {
            "$ref": "#/components/schemas/FCMConfigUpdateReq"
          },
          "exoPhones": {
            "items": {
              "$ref": "#/components/schemas/ExophoneReq"
            },
            "type": "array",
            "minItems": 1
          },
          "registryUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "ExophoneReq": {
        "type": "object",
        "required": [
          "primaryPhone",
          "backupPhone"
        ],
        "properties": {
          "backupPhone": {
            "type": "string"
          },
          "primaryPhone": {
            "type": "string"
          }
        }
      },
      "FCMConfigUpdateReq": {
        "type": "object",
        "required": [
          "fcmUrl",
          "fcmServiceAccount"
        ],
        "properties": {
          "fcmServiceAccount": {
            "type": "string"
          },
          "fcmUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "MapsServiceConfigUpdateReq": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "serviceName",
              "serviceConfig"
            ],
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/GoogleCfgUpdateReq"
              },
              "serviceName": {
                "type": "string",
                "enum": [
                  "Google"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "serviceName",
              "serviceConfig"
            ],
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/OSRMCfgUpdateReq"
              },
              "serviceName": {
                "type": "string",
                "enum": [
                  "OSRM"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "serviceName",
              "serviceConfig"
            ],
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/MMICfgUpdateReq"
              },
              "serviceName": {
                "type": "string",
                "enum": [
                  "MMI"
                ]
              }
            }
          }
        ]
      },
      "GoogleCfgUpdateReq": {
        "type": "object",
        "required": [
          "googleMapsUrl",
          "googleRoadsUrl",
          "googleKey"
        ],
        "properties": {
          "googleKey": {
            "type": "string"
          },
          "googleRoadsUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "googleMapsUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "OSRMCfgUpdateReq": {
        "type": "object",
        "required": [
          "osrmUrl"
        ],
        "properties": {
          "osrmUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "radiusDeviation": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          }
        }
      },
      "MMICfgUpdateReq": {
        "type": "object",
        "required": [
          "mmiAuthUrl",
          "mmiAuthId",
          "mmiAuthSecret",
          "mmiApiKey",
          "mmiKeyUrl",
          "mmiNonKeyUrl"
        ],
        "properties": {
          "mmiNonKeyUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "mmiKeyUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "mmiAuthUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "mmiAuthId": {
            "type": "string"
          },
          "mmiAuthSecret": {
            "type": "string"
          },
          "mmiApiKey": {
            "type": "string"
          }
        }
      },
      "MapsServiceUsageConfigUpdateReq": {
        "type": "object",
        "properties": {
          "getRoutes": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getEstimatedPickupDistances": {
            "$ref": "#/components/schemas/MapsService"
          },
          "autoComplete": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getDistances": {
            "$ref": "#/components/schemas/MapsService"
          },
          "snapToRoad": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getPlaceDetails": {
            "$ref": "#/components/schemas/MapsService"
          },
          "getPlaceName": {
            "$ref": "#/components/schemas/MapsService"
          }
        }
      },
      "MapsService": {
        "type": "string",
        "enum": [
          "Google",
          "OSRM",
          "MMI"
        ]
      },
      "SmsServiceConfigUpdateReq": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "serviceName",
              "serviceConfig"
            ],
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/MyValueFirstCfgUpdateReq"
              },
              "serviceName": {
                "type": "string",
                "enum": [
                  "MyValueFirst"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "serviceName",
              "serviceConfig"
            ],
            "properties": {
              "serviceConfig": {
                "$ref": "#/components/schemas/ExotelSmsCfgUpdateReq"
              },
              "serviceName": {
                "type": "string",
                "enum": [
                  "ExotelSms"
                ]
              }
            }
          }
        ]
      },
      "MyValueFirstCfgUpdateReq": {
        "type": "object",
        "required": [
          "username",
          "password",
          "url"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "url": {
            "$ref": "#/components/schemas/BaseUrl"
          }
        }
      },
      "ExotelSmsCfgUpdateReq": {
        "type": "object",
        "required": [
          "apiKey",
          "apiToken",
          "sid",
          "url"
        ],
        "properties": {
          "sid": {
            "type": "string"
          },
          "apiToken": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SmsServiceUsageConfigUpdateReq": {
        "type": "object",
        "required": [
          "smsProvidersPriorityList"
        ],
        "properties": {
          "smsProvidersPriorityList": {
            "items": {
              "$ref": "#/components/schemas/SmsService"
            },
            "type": "array"
          }
        }
      },
      "SmsService": {
        "type": "string",
        "enum": [
          "MyValueFirst",
          "ExotelSms"
        ]
      },
      "ShareRideInfoRes": {
        "type": "object",
        "required": [
          "id",
          "bookingId",
          "status",
          "driverName",
          "vehicleNumber",
          "vehicleModel",
          "vehicleColor",
          "fromLocation",
          "toLocation"
        ],
        "properties": {
          "driverName": {
            "type": "string"
          },
          "vehicleNumber": {
            "type": "string"
          },
          "driverRating": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "estimatedDistance": {
            "$ref": "#/components/schemas/Centesimal"
          },
          "status": {
            "$ref": "#/components/schemas/RideStatus"
          },
          "id": {
            "type": "string"
          },
          "trackingUrl": {
            "$ref": "#/components/schemas/BaseUrl"
          },
          "vehicleModel": {
            "type": "string"
          },
          "toLocation": {
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "rideStartTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "fromLocation": {
            "$ref": "#/components/schemas/Location"
          },
          "userLastName": {
            "type": "string"
          },
          "bookingId": {
            "type": "string"
          },
          "vehicleColor": {
            "type": "string"
          },
          "rideEndTime": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "userFirstName": {
            "type": "string"
          }
        }
      },
      "RideListRes": {
        "type": "object",
        "required": [
          "totalItems",
          "summary",
          "rides"
        ],
        "properties": {
          "totalItems": {
            "minimum": -9223372036854776000,
            "type": "integer",
            "maximum": 9223372036854776000
          },
          "summary": {
            "$ref": "#/components/schemas/Summary"
          },
          "rides": {
            "items": {
              "$ref": "#/components/schemas/RideListItem"
            },
            "type": "array"
          }
        }
      },
      "RideListItem": {
        "type": "object",
        "required": [
          "rideShortId",
          "rideCreatedAt",
          "rideId",
          "driverName",
          "driverPhoneNo",
          "vehicleNo",
          "bookingStatus"
        ],
        "properties": {
          "driverName": {
            "type": "string"
          },
          "rideId": {
            "type": "string"
          },
          "bookingStatus": {
            "$ref": "#/components/schemas/BookingStatus"
          },
          "customerName": {
            "type": "string"
          },
          "driverPhoneNo": {
            "type": "string"
          },
          "vehicleNo": {
            "type": "string"
          },
          "rideShortId": {
            "type": "string"
          },
          "rideCreatedAt": {
            "$ref": "#/components/schemas/UTCTime"
          },
          "customerPhoneNo": {
            "type": "string"
          }
        }
      },
      "CustomerAuthReq": {
        "type": "object",
        "required": [
          "mobileNumber",
          "mobileCountryCode"
        ],
        "properties": {
          "mobileCountryCode": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          }
        }
      },
      "ExotelHeartbeatReq": {
        "type": "object",
        "required": [
          "timestamp",
          "status_type",
          "incoming_affected",
          "outgoing_affected"
        ],
        "properties": {
          "incoming_affected": {
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "type": "array"
          },
          "status_type": {
            "$ref": "#/components/schemas/StatusType"
          },
          "outgoing_affected": {
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "type": "array"
          },
          "timestamp": {
            "$ref": "#/components/schemas/UTCTime"
          }
        }
      },
      "StatusType": {
        "type": "string",
        "enum": [
          "OK",
          "WARNING",
          "CRITICAL",
          "PAYLOAD_TOO_LARGE"
        ]
      },
      "PhoneNumber": {
        "type": "object",
        "required": [
          "phone_number_sid",
          "phone_number"
        ],
        "properties": {
          "phone_number_sid": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized"
      }
    },
    "securitySchemes": {
      "SignatureAuthReq": {
        "name": "x-sdk-authorization",
        "type": "apiKey",
        "in": "header",
        "description": "Looks up the given key Id in the Core registry."
      },
      "VerifyToken": {
        "name": "token",
        "type": "apiKey",
        "in": "header",
        "description": "Checks whether token is registered.If you don't have a token, use registration endpoints."
      },
      "Subscriber": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": "Looks up the given key Id in the Core registry."
      },
      "DashboardVerifyToken": {
        "name": "token",
        "type": "apiKey",
        "in": "header",
        "description": "Checks whether dashboard token is registered."
      }
    }
  }
}
